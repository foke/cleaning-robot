{"version":3,"sources":["helpers/gridHelpers.ts","settings.ts","components/Floor/Floor.tsx","components/Robot/robot-vacuum-cleaner.svg","components/Robot/Robot.tsx","reducers/gridReducer.ts","App.tsx","index.tsx"],"names":["Direction","settings","Row","styled","div","Col","clean","Floor","grid","map","row","index","column","ROBOT_MOVEMENT_SPEED","RobotWrapper","position","x","y","animate","RobotImage","img","rotation","Robot","React","useState","rotationAngle","setRotationAngle","previousPosititon","useRef","useEffect","current","src","robot","alt","checkIsGridComplete","every","getRandomAllowedDirection","currentPosition","allowedDirections","push","WEST","EAST","NORTH","SOUTH","Math","floor","random","length","getInitialState","array2d","i","Array","fill","generateGrid","getNextMove","state","direction","getRandomAdjacentPosition","gridReducer","action","type","Error","AppContainer","Room","Panel","ResetButton","button","Status","p","complete","App","useReducer","dispatch","movementInterval","startTimeStamp","Date","getTime","window","setInterval","clearInterval","hasStarted","flatMap","filter","isComplete","secondsPassed","round","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+JAGKA,E,qDCHQC,EACA,GADAA,EAEY,IAFZA,EAGM,G,OCKbC,EAAMC,IAAOC,IAAV,8CAIHC,EAAMF,IAAOC,IAAV,oLACEH,EACCA,GACU,qBAAEK,MAAmB,UAAY,YAGtBL,EAA+B,KAGnDM,EAA+B,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAC5C,OACE,mCACGA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OACR,cAACT,EAAD,UACGQ,EAAID,KAAI,SAACG,EAAQD,GAAT,OACP,cAACN,EAAD,CAAKC,MAAOM,GAAaD,OAFnBA,SCzBH,MAA0B,iDCWnCE,EAAuB,GAAMZ,EAA+B,IAE5Da,EAAeX,IAAOC,IAAV,6HAGZ,qBAAEW,SAAuBC,EAAIf,KAC7B,qBAAEc,SAAuBE,EAAIhB,KAEnB,qBAAEiB,QAAoB,oBAAgBL,EAAhB,YAAiD,MAGjFM,EAAahB,IAAOiB,IAAV,6FACM,qBAAEC,WACbpB,EACCA,GAGCqB,EAA+B,SAAC,GAAyB,IAAxBP,EAAuB,EAAvBA,SAAUG,EAAa,EAAbA,QAAa,EACzBK,IAAMC,SAAiB,GADE,mBAC5DC,EAD4D,KAC7CC,EAD6C,KAE7DC,EAAoBJ,IAAMK,OAAyB,MAkBzD,OAhBAL,IAAMM,WAAU,WACdH,EAAiB,GACbC,EAAkBG,SAAWZ,IAC3BH,EAASC,EAAIW,EAAkBG,QAAQd,EACzCU,EAAiB,IACRX,EAASC,EAAIW,EAAkBG,QAAQd,EAChDU,EAAiB,KACRX,EAASE,EAAIU,EAAkBG,QAAQb,EAChDS,EAAiB,KAEjBA,EAAiB,IAGrBC,EAAkBG,QAAUf,IAC3B,CAACA,EAAUG,IAGZ,cAACJ,EAAD,CAAcC,SAAUA,EAAUG,QAASA,EAA3C,SACE,cAACC,EAAD,CAAYE,SAAUI,EAAeM,IAAKC,EAAOC,IAAI,c,SJ/CtDjC,O,iBAAAA,I,iBAAAA,I,eAAAA,I,gBAAAA,M,KAOE,I,UAWMkC,EAAsB,SAAC1B,GAClC,OAAOA,EAAK2B,OAAM,SAAAzB,GAAG,OAAIA,EAAIyB,OAAM,SAAAvB,GAAM,OAAIA,SAgCzCwB,EAA4B,SAACC,GACjC,IAAMC,EAAoB,GAoB1B,OAlBID,EAAgBrB,EAAI,GACtBsB,EAAkBC,KAAKvC,EAAUwC,MAG/BH,EAAgBrB,EAAIf,EAAmB,GACzCqC,EAAkBC,KAAKvC,EAAUyC,MAG/BJ,EAAgBpB,EAAI,GACtBqB,EAAkBC,KAAKvC,EAAU0C,OAG/BL,EAAgBpB,EAAIhB,EAAmB,GACzCqC,EAAkBC,KAAKvC,EAAU2C,OAK5BL,EAFaM,KAAKC,MAAMD,KAAKE,SAAWR,EAAkBS,UKlEtDC,EAAkB,WAC7B,IAAMX,EL0BC,CAACrB,EAHQ4B,KAAKC,MAAMD,KAAKE,SAAW7C,GAGvBgB,EAFJ2B,KAAKC,MAAMD,KAAKE,SAAW7C,IKvBrCO,ELCoB,WAG1B,IAFA,IAAMyC,EAAuB,GAEpBC,EAAI,EAAGA,EAAIjD,EAAoBiD,IAAK,CAC3C,IAAMlC,EAAImC,MAAMlD,GAAoBmD,MAAK,GACzCH,EAAQV,KAAKvB,GAGf,OAAOiC,EKTMI,GAGb,OAFA7C,EAAK6B,EAAgBpB,GAAGoB,EAAgBrB,IAAK,EAEtC,CAAER,OAAM6B,oBAIXiB,EAAc,SAACC,GACnB,IAAMlB,ELoBiC,SAACA,GACxC,IAAMmB,EAAYpB,EAA0BC,GACrCrB,EAAQqB,EAARrB,EAAGC,EAAKoB,EAALpB,EAEV,OAAIuC,IAAcxD,EAAUwC,KACnB,CAACxB,EAAGA,EAAE,EAAGC,KACPuC,IAAcxD,EAAUyC,KAC1B,CAACzB,EAAGA,EAAE,EAAGC,KACPuC,IAAcxD,EAAU0C,MAC1B,CAAE1B,IAAGC,EAAGA,EAAE,GACRuC,IAAcxD,EAAU2C,MAC1B,CAAC3B,IAAGC,EAAGA,EAAE,GAGX,CAACD,IAAGC,KKlCawC,CAA0BF,EAAMlB,iBAOxD,MAAO,CAAE7B,KANI+C,EAAM/C,KAAKC,KAAI,SAACC,EAAKO,GAChC,OAAOP,EAAID,KAAI,SAACG,EAAQI,GAEtB,SAD2BA,IAAMqB,EAAgBrB,GAAKC,IAAMoB,EAAgBpB,IAC1CL,QAGvByB,oBAGJqB,EAAc,SAACH,EAAcI,GACxC,OAAQA,EAAOC,MACb,IAAK,QACH,OAAOZ,IAGT,IAAK,OACH,OAAOM,EAAYC,GAErB,QACE,MAAM,IAAIM,MAAM,uBAAyBF,EAAOC,QC7BhDE,EAAe3D,IAAOC,IAAV,6JAMPH,EAAqBA,GAG1B8D,EAAO5D,IAAOC,IAAV,gHAGEH,EAAqBA,GAI3B+D,EAAQ7D,IAAOC,IAAV,qIAQL6D,EAAc9D,IAAO+D,OAAV,mOAcXC,EAAShE,IAAOiE,EAAV,uDACD,qBAAEC,SAAyB,UAAY,UA+CnCC,EA3CH,WAAO,IAAD,EACU/C,IAAMgD,WAAWb,EAAaV,KADxC,mBACTO,EADS,KACFiB,EADE,KAEVC,EAAmBlD,IAAMK,SACzB8C,EAAiBnD,IAAMK,QAAe,IAAI+C,MAAOC,WAEvDrD,IAAMM,WAAU,WACd4C,EAAiB3C,QAAU+C,OAAOC,aAAY,kBAAMN,EAAS,CAACZ,KAAM,WAAU3D,KAC7E,IAEHsB,IAAMM,WAAU,WACVK,EAAoBqB,EAAM/C,OAC5BuE,cAAcN,EAAiB3C,WAEhC,CAACyB,EAAM/C,OAEV,IAQMwE,EAAqCzB,EAAM/C,KNhDvByE,SAAQ,SAAAvE,GAAG,OAAIA,EAAIwE,QAAO,SAAAtE,GAAM,OAAIA,QAASmC,OMgDd,EACnDoC,EAAajD,EAAoBqB,EAAM/C,MACvC4E,EAAgBxC,KAAKyC,QAAO,IAAIV,MAAOC,UAAYF,EAAe5C,SAAW,KAEnF,OACE,eAACgC,EAAD,WACE,eAACC,EAAD,WACE,cAAC,EAAD,CAAOhD,SAAUwC,EAAMlB,gBAAiBnB,QAAS8D,IACjD,cAAC,EAAD,CAAOxE,KAAM+C,EAAM/C,UAErB,eAACwD,EAAD,WACE,cAACG,EAAD,CAAQE,SAAUc,EAAlB,SACGA,EAAU,+BAA2BC,EAA3B,YAAqD,4BAElE,cAACnB,EAAD,CAAaqB,QAtBC,WAClBP,cAAcN,EAAiB3C,SAC/B0C,EAAS,CAACZ,KAAM,UAEhBc,EAAe5C,SAAU,IAAI6C,MAAOC,UACpCH,EAAiB3C,QAAU+C,OAAOC,aAAY,kBAAMN,EAAS,CAACZ,KAAM,WAAU3D,IAiB1E,0B,MClFRsF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6a06a3c6.chunk.js","sourcesContent":["import { ICoordinate } from '../interfaces';\nimport { settings } from '../settings';\n\nenum Direction {\n  NORTH,\n  SOUTH,\n  EAST,\n  WEST\n}\n\nexport const generateGrid = (): boolean[][] => {\n  const array2d: boolean[][] = [];\n\n  for (let i = 0; i < settings.GRID_SIZE; i++) {\n    const x = Array(settings.GRID_SIZE).fill(false);\n    array2d.push(x);\n  }\n\n  return array2d;\n};\n\nexport const checkIsGridComplete = (grid: boolean[][]): boolean => {\n  return grid.every(row => row.every(column => column));\n};\n\nexport const getNumberOfCleanedTiles = (grid: boolean[][]): number => {\n  const cleanedTiles = grid.flatMap(row => row.filter(column => column)).length;\n  return cleanedTiles;\n};\n\nexport const getRandomPosition = (): ICoordinate => {\n  const randomX = Math.floor(Math.random() * settings.GRID_SIZE);\n  const randomY = Math.floor(Math.random() * settings.GRID_SIZE);\n\n  return {x: randomX, y: randomY};\n};\n\nexport const getRandomAdjacentPosition = (currentPosition: ICoordinate): ICoordinate => {\n  const direction = getRandomAllowedDirection(currentPosition);\n  const {x, y} = currentPosition;\n\n  if (direction === Direction.WEST) {\n    return {x: x-1, y};\n  } else if (direction === Direction.EAST) {\n    return {x: x+1, y};\n  } else if (direction === Direction.NORTH) {\n    return { x, y: y-1};\n  } else if (direction === Direction.SOUTH) {\n    return {x, y: y+1};\n  }\n\n  return {x, y};\n};\n\nconst getRandomAllowedDirection = (currentPosition: ICoordinate): Direction => {\n  const allowedDirections = [];\n\n  if (currentPosition.x > 0) {\n    allowedDirections.push(Direction.WEST);\n  }\n\n  if (currentPosition.x < settings.GRID_SIZE-1) {\n    allowedDirections.push(Direction.EAST);\n  }\n\n  if (currentPosition.y > 0) {\n    allowedDirections.push(Direction.NORTH);\n  }\n\n  if (currentPosition.y < settings.GRID_SIZE-1) {\n    allowedDirections.push(Direction.SOUTH);\n  }\n\n  const randomIndex = Math.floor(Math.random() * allowedDirections.length);\n\n  return allowedDirections[randomIndex];\n};","export const settings = {\n  GRID_SIZE: 10,\n  ROBOT_SPEED_IN_MILLIS: 500,\n  TILE_SIZE_IN_PX: 50\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { settings } from '../../settings';\n\ninterface IFloorProps {\n  grid: boolean[][];\n}\n\nconst Row = styled.div`\n  display: flex;\n`;\n\nconst Col = styled.div<{clean: boolean}>`\n  width: ${settings.TILE_SIZE_IN_PX}px;\n  height: ${settings.TILE_SIZE_IN_PX}px;\n  background-color: ${({clean}) => clean ? '#a4d2a4' : '#d5c6bb'};\n  border: 1px solid #fff;\n  box-sizing: border-box;\n  transition: background-color ${settings.ROBOT_SPEED_IN_MILLIS/1000}s;\n`;\n\nexport const Floor: React.FC<IFloorProps> = ({grid}) => {\n  return (\n    <>\n      {grid.map((row, index) => (\n        <Row key={index}>\n          {row.map((column, index) => (\n            <Col clean={column} key={index} />\n          ))}\n        </Row>\n      ))}\n    </>\n  );\n};","export default __webpack_public_path__ + \"static/media/robot-vacuum-cleaner.bf037834.svg\";","import React from 'react';\nimport styled from 'styled-components';\nimport { settings } from '../../settings';\nimport { ICoordinate } from '../../interfaces';\nimport robot from './robot-vacuum-cleaner.svg';\n\ninterface IRobotProps {\n  position: ICoordinate;\n  animate: boolean;\n};\n\nconst ROBOT_MOVEMENT_SPEED = 0.9 * settings.ROBOT_SPEED_IN_MILLIS/1000;\n\nconst RobotWrapper = styled.div<{position: ICoordinate, animate: boolean}>`\n  position: absolute;\n  transform: translate(\n    ${({position}) => position.x * settings.TILE_SIZE_IN_PX}px,\n    ${({position}) => position.y * settings.TILE_SIZE_IN_PX}px\n  );\n  transition: ${({animate}) => animate ? `transform ${ROBOT_MOVEMENT_SPEED}s linear` : ''};\n`;\n\nconst RobotImage = styled.img<{rotation: number}>`\n  transform: rotate(${({rotation}) => rotation}deg);\n  width: ${settings.TILE_SIZE_IN_PX}px;\n  height: ${settings.TILE_SIZE_IN_PX}px;\n`;\n\nexport const Robot: React.FC<IRobotProps> = ({position, animate}) => {\n  const [rotationAngle, setRotationAngle] = React.useState<number>(0);\n  const previousPosititon = React.useRef<ICoordinate|null>(null);\n\n  React.useEffect(() => {\n    setRotationAngle(0);\n    if (previousPosititon.current && animate) {\n      if (position.x > previousPosititon.current.x) {\n        setRotationAngle(90);\n      } else if (position.x < previousPosititon.current.x) {\n        setRotationAngle(270);\n      } else if (position.y > previousPosititon.current.y) {\n        setRotationAngle(180);\n      } else {\n        setRotationAngle(0);\n      }\n    }\n    previousPosititon.current = position;\n  }, [position, animate]);\n\n  return (\n    <RobotWrapper position={position} animate={animate}>\n      <RobotImage rotation={rotationAngle} src={robot} alt=\"robot\" />\n    </RobotWrapper>\n  );\n};","import { ICoordinate } from '../interfaces';\nimport { generateGrid, getRandomAdjacentPosition, getRandomPosition } from '../helpers/gridHelpers';\n\ntype State = { currentPosition: ICoordinate, grid: boolean[][] };\ntype Action = { type: 'RESET' | 'MOVE' };\n\n// returns a random start position and a new grid (with start position marked as cleaned)\nexport const getInitialState = () => {\n  const currentPosition = getRandomPosition();\n  const grid = generateGrid();\n  grid[currentPosition.y][currentPosition.x] = true;\n\n  return { grid, currentPosition };\n};\n\n// returns a new position and the grid (with new position marked as cleaned)\nconst getNextMove = (state: State) => {\n  const currentPosition = getRandomAdjacentPosition(state.currentPosition!);\n  const grid = state.grid.map((row, y) => {\n    return row.map((column, x) => {\n      const isCurrentPosition = (x === currentPosition.x && y === currentPosition.y);\n      return isCurrentPosition ? true : column;\n    });\n  });\n  return { grid, currentPosition };\n}\n\nexport const gridReducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'RESET':\n      return getInitialState();\n\n\n    case 'MOVE':\n      return getNextMove(state);\n\n    default:\n      throw new Error('Not a valid action: ' + action.type);\n  }\n};","import React from 'react'\nimport styled from 'styled-components';\nimport { settings } from './settings';\nimport { Floor, Robot } from './components';\nimport { getInitialState, gridReducer } from './reducers/gridReducer';\nimport { checkIsGridComplete, getNumberOfCleanedTiles } from './helpers/gridHelpers';\n\n\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  min-height: 100%;\n  flex-direction: column;\n  margin: 0 auto;\n  width: ${settings.GRID_SIZE * settings.TILE_SIZE_IN_PX}px;\n`;\n\nconst Room = styled.div`\n  position: relative;\n  border-radius: 5px;\n  height: ${settings.GRID_SIZE * settings.TILE_SIZE_IN_PX}px;\n  overflow: hidden;\n`;\n\nconst Panel = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  font-size: 1.4rem;\n`;\n\nconst ResetButton = styled.button`\n  background-color: #eee;\n  color: #666;\n  border-radius: 5px;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1.4rem;\n\n  &:hover {\n    background-color: #ccc;\n    cursor: pointer;\n  }\n`;\n\nconst Status = styled.p<{complete: boolean}>`\n  color: ${({complete}) => complete ? '#a4d2a4' : '#666'};\n  flex: 1;\n`;\n\nconst App = () => {\n  const [state, dispatch] = React.useReducer(gridReducer, getInitialState());\n  const movementInterval = React.useRef<number>();\n  const startTimeStamp = React.useRef<number>(new Date().getTime());\n\n  React.useEffect(() => {\n    movementInterval.current = window.setInterval(() => dispatch({type: 'MOVE'}), settings.ROBOT_SPEED_IN_MILLIS);\n  }, []);\n\n  React.useEffect(() => {\n    if (checkIsGridComplete(state.grid)) {\n      clearInterval(movementInterval.current);\n    }\n  }, [state.grid]);\n\n  const handleReset = () => {\n    clearInterval(movementInterval.current);\n    dispatch({type: 'RESET'});\n\n    startTimeStamp.current = new Date().getTime();\n    movementInterval.current = window.setInterval(() => dispatch({type: 'MOVE'}), settings.ROBOT_SPEED_IN_MILLIS);\n  };\n\n  const hasStarted = getNumberOfCleanedTiles(state.grid) > 1;\n  const isComplete = checkIsGridComplete(state.grid);\n  const secondsPassed = Math.round((new Date().getTime() - startTimeStamp.current) / 1000);\n\n  return (\n    <AppContainer>\n      <Room>\n        <Robot position={state.currentPosition} animate={hasStarted} />\n        <Floor grid={state.grid} />\n      </Room>\n      <Panel>\n        <Status complete={isComplete}>\n          {isComplete ? `Cleaning complete in ${secondsPassed} seconds` : 'Cleaning in progress...'}\n        </Status>\n        <ResetButton onClick={handleReset}>Reset</ResetButton>\n      </Panel>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}