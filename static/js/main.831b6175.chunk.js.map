{"version":3,"sources":["helpers/gridHelpers.ts","settings.ts","components/Floor/Floor.tsx","components/Robot/robot-vacuum-cleaner.svg","components/Robot/Robot.tsx","components/Panel/Panel.tsx","reducers/gridReducer.ts","App.tsx","index.tsx"],"names":["Direction","settings","Row","styled","div","Col","clean","Floor","grid","map","row","index","column","data-testid","ROBOT_MOVEMENT_SPEED","RobotWrapper","position","x","y","animate","RobotImage","img","rotation","Robot","React","useState","rotationAngle","setRotationAngle","previousPosititon","useRef","useEffect","current","src","robot","alt","PanelWrapper","ResetButton","button","Status","p","complete","Panel","isComplete","secondsPassed","onReset","onClick","checkIsGridComplete","every","getRandomAllowedDirection","currentPosition","gridSize","allowedDirections","push","WEST","EAST","NORTH","SOUTH","Math","floor","random","length","getInitialState","Error","getRandomPosition","array2d","i","Array","fill","generateGrid","getNextMove","state","direction","getRandomAdjacentPosition","gridReducer","action","type","AppContainer","Room","App","useReducer","dispatch","movementInterval","startTimeStamp","Date","getTime","window","setInterval","clearInterval","hasStarted","flatMap","filter","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.831b6175.chunk.js","sourcesContent":["import { ICoordinate } from '../interfaces';\n\nenum Direction {\n  NORTH,\n  SOUTH,\n  EAST,\n  WEST\n}\n\nexport const generateGrid = (gridSize: number): boolean[][] => {\n  if (gridSize < 1) {\n    throw new Error('Size cannot be less than 1');\n  }\n\n  const array2d: boolean[][] = [];\n\n  for (let i = 0; i < gridSize; i++) {\n    const x = Array(gridSize).fill(false);\n    array2d.push(x);\n  }\n\n  return array2d;\n};\n\nexport const checkIsGridComplete = (grid: boolean[][]): boolean => {\n  return grid.every(row => row.every(column => column));\n};\n\nexport const getNumberOfCleanedTiles = (grid: boolean[][]): number => {\n  const cleanedTiles = grid.flatMap(row => row.filter(column => column)).length;\n  return cleanedTiles;\n};\n\nexport const getRandomPosition = (gridSize: number): ICoordinate => {\n  if (gridSize < 1) {\n    throw new Error('Size cannot be less than 1');\n  }\n\n  const randomX = Math.floor(Math.random() * gridSize);\n  const randomY = Math.floor(Math.random() * gridSize);\n\n  return {x: randomX, y: randomY};\n};\n\nexport const getRandomAdjacentPosition = (currentPosition: ICoordinate, gridSize: number): ICoordinate => {\n  if (gridSize < 1) {\n    throw new Error('Grid size cannot be less than 1');\n  }\n\n  const isPositionOutsideGrid = (\n    currentPosition.x < 0 ||\n    currentPosition.y < 0 ||\n    currentPosition.x >= gridSize ||\n    currentPosition.y >= gridSize\n  );\n  if (isPositionOutsideGrid) {\n    throw new Error('Position must be within grid size');\n  }\n\n  const direction = getRandomAllowedDirection(currentPosition, gridSize);\n  const {x, y} = currentPosition;\n\n  if (direction === Direction.WEST) {\n    return {x: x-1, y};\n  } else if (direction === Direction.EAST) {\n    return {x: x+1, y};\n  } else if (direction === Direction.NORTH) {\n    return { x, y: y-1};\n  } else if (direction === Direction.SOUTH) {\n    return {x, y: y+1};\n  }\n\n  return {x, y};\n};\n\nconst getRandomAllowedDirection = (currentPosition: ICoordinate, gridSize: number): Direction => {\n  const allowedDirections = [];\n\n  if (currentPosition.x > 0) {\n    allowedDirections.push(Direction.WEST);\n  }\n\n  if (currentPosition.x < gridSize-1) {\n    allowedDirections.push(Direction.EAST);\n  }\n\n  if (currentPosition.y > 0) {\n    allowedDirections.push(Direction.NORTH);\n  }\n\n  if (currentPosition.y < gridSize-1) {\n    allowedDirections.push(Direction.SOUTH);\n  }\n\n  const randomIndex = Math.floor(Math.random() * allowedDirections.length);\n\n  return allowedDirections[randomIndex];\n};","export const settings = {\n  GRID_SIZE: 10,\n  ROBOT_SPEED_IN_MILLIS: 500,\n  TILE_SIZE_IN_PX: 50\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { settings } from '../../settings';\n\ninterface IFloorProps {\n  grid: boolean[][];\n}\n\nconst Row = styled.div`\n  display: flex;\n`;\n\nconst Col = styled.div<{clean: boolean}>`\n  width: ${settings.TILE_SIZE_IN_PX}px;\n  height: ${settings.TILE_SIZE_IN_PX}px;\n  background-color: ${({clean}) => clean ? '#a4d2a4' : '#d5c6bb'};\n  border: 1px solid #fff;\n  box-sizing: border-box;\n  transition: background-color ${settings.ROBOT_SPEED_IN_MILLIS/1000}s;\n`;\n\nexport const Floor: React.FC<IFloorProps> = ({grid}) => {\n  return (\n    <>\n      {grid.map((row, index) => (\n        <Row key={index}>\n          {row.map((column, index) => (\n            <Col clean={column} key={index} data-testid={column ? 'tile-clean' : 'tile-dirty'} />\n          ))}\n        </Row>\n      ))}\n    </>\n  );\n};","export default __webpack_public_path__ + \"static/media/robot-vacuum-cleaner.bf037834.svg\";","import React from 'react';\nimport styled from 'styled-components';\nimport { settings } from '../../settings';\nimport { ICoordinate } from '../../interfaces';\nimport robot from './robot-vacuum-cleaner.svg';\n\ninterface IRobotProps {\n  position: ICoordinate;\n  animate: boolean;\n};\n\nconst ROBOT_MOVEMENT_SPEED = 0.9 * settings.ROBOT_SPEED_IN_MILLIS/1000;\n\nconst RobotWrapper = styled.div<{position: ICoordinate, animate: boolean}>`\n  position: absolute;\n  transform: translate(\n    ${({position}) => position.x * settings.TILE_SIZE_IN_PX}px,\n    ${({position}) => position.y * settings.TILE_SIZE_IN_PX}px\n  );\n  transition: ${({animate}) => animate ? `transform ${ROBOT_MOVEMENT_SPEED}s linear` : ''};\n`;\n\nconst RobotImage = styled.img<{rotation: number}>`\n  transform: rotate(${({rotation}) => rotation}deg);\n  width: ${settings.TILE_SIZE_IN_PX}px;\n  height: ${settings.TILE_SIZE_IN_PX}px;\n`;\n\nexport const Robot: React.FC<IRobotProps> = ({position, animate}) => {\n  const [rotationAngle, setRotationAngle] = React.useState<number>(0);\n  const previousPosititon = React.useRef<ICoordinate|null>(null);\n\n  React.useEffect(() => {\n    setRotationAngle(0);\n    if (previousPosititon.current && animate) {\n      if (position.x > previousPosititon.current.x) {\n        setRotationAngle(90);\n      } else if (position.x < previousPosititon.current.x) {\n        setRotationAngle(270);\n      } else if (position.y > previousPosititon.current.y) {\n        setRotationAngle(180);\n      } else {\n        setRotationAngle(0);\n      }\n    }\n    previousPosititon.current = position;\n  }, [position, animate]);\n\n  return (\n    <RobotWrapper position={position} animate={animate}>\n      <RobotImage rotation={rotationAngle} src={robot} alt=\"cleaning robot\" />\n    </RobotWrapper>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\n\ninterface IPanelProps {\n  isComplete: boolean;\n  secondsPassed: number;\n  onReset: () => void;\n}\n\nconst PanelWrapper = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  font-size: 1.4rem;\n`;\n\nconst ResetButton = styled.button`\n  background-color: #eee;\n  color: #666;\n  border-radius: 5px;\n  border: none;\n  padding: 10px 20px;\n  font-size: 1.4rem;\n\n  &:hover {\n    background-color: #ccc;\n    cursor: pointer;\n  }\n`;\n\nconst Status = styled.p<{complete: boolean}>`\n  color: ${({complete}) => complete ? '#a4d2a4' : '#666'};\n  flex: 1;\n`;\n\nexport const Panel: React.FC<IPanelProps> = ({isComplete, secondsPassed, onReset}) => {\n  return (\n    <PanelWrapper>\n      <Status complete={isComplete}>\n        {isComplete ? `Cleaning complete in ${secondsPassed} seconds` : 'Cleaning in progress...'}\n      </Status>\n      <ResetButton onClick={onReset}>Reset</ResetButton>\n    </PanelWrapper>\n  );\n};","import { ICoordinate } from '../interfaces';\nimport { generateGrid, getRandomAdjacentPosition, getRandomPosition } from '../helpers/gridHelpers';\nimport { settings } from '../settings';\n\ntype State = { currentPosition: ICoordinate, grid: boolean[][] };\ntype Action = { type: 'RESET' | 'MOVE' };\n\n// returns a random start position and a new grid (with start position marked as cleaned)\nexport const getInitialState = () => {\n  const currentPosition = getRandomPosition(settings.GRID_SIZE);\n  const grid = generateGrid(settings.GRID_SIZE);\n  grid[currentPosition.y][currentPosition.x] = true;\n\n  return { grid, currentPosition };\n};\n\n// returns a new position and the grid (with new position marked as cleaned)\nconst getNextMove = (state: State) => {\n  const currentPosition = getRandomAdjacentPosition(state.currentPosition, settings.GRID_SIZE);\n  const grid = state.grid.map((row, y) => {\n    return row.map((column, x) => {\n      const isCurrentPosition = (x === currentPosition.x && y === currentPosition.y);\n      return isCurrentPosition ? true : column;\n    });\n  });\n  return { grid, currentPosition };\n}\n\nexport const gridReducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'RESET':\n      return getInitialState();\n\n    case 'MOVE':\n      return getNextMove(state);\n\n    default:\n      throw new Error('Not a valid action: ' + action.type);\n  }\n};","import React from 'react'\nimport styled from 'styled-components';\nimport { settings } from './settings';\nimport { Floor, Robot, Panel } from './components';\nimport { getInitialState, gridReducer } from './reducers/gridReducer';\nimport { checkIsGridComplete, getNumberOfCleanedTiles } from './helpers/gridHelpers';\n\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  min-height: 100%;\n  flex-direction: column;\n  margin: 0 auto;\n  width: ${settings.GRID_SIZE * settings.TILE_SIZE_IN_PX}px;\n`;\n\nconst Room = styled.div`\n  position: relative;\n  border-radius: 5px;\n  height: ${settings.GRID_SIZE * settings.TILE_SIZE_IN_PX}px;\n  overflow: hidden;\n`;\n\nconst App = () => {\n  const [state, dispatch] = React.useReducer(gridReducer, getInitialState());\n  const movementInterval = React.useRef<number>();\n  const startTimeStamp = React.useRef<number>(new Date().getTime());\n\n  React.useEffect(() => {\n    movementInterval.current = window.setInterval(() => dispatch({type: 'MOVE'}), settings.ROBOT_SPEED_IN_MILLIS);\n    return () => clearInterval(movementInterval.current);\n  }, []);\n\n  React.useEffect(() => {\n    if (checkIsGridComplete(state.grid)) {\n      clearInterval(movementInterval.current);\n    }\n  }, [state.grid]);\n\n  const handleReset = () => {\n    clearInterval(movementInterval.current);\n    dispatch({type: 'RESET'});\n\n    startTimeStamp.current = new Date().getTime();\n    movementInterval.current = window.setInterval(() => dispatch({type: 'MOVE'}), settings.ROBOT_SPEED_IN_MILLIS);\n  };\n\n  const hasStarted = getNumberOfCleanedTiles(state.grid) > 1;\n  const isComplete = checkIsGridComplete(state.grid);\n  const secondsPassed = Math.round((new Date().getTime() - startTimeStamp.current) / 1000);\n\n  return (\n    <AppContainer>\n      <Room>\n        <Robot position={state.currentPosition} animate={hasStarted} />\n        <Floor grid={state.grid} />\n      </Room>\n      <Panel onReset={handleReset} isComplete={isComplete} secondsPassed={secondsPassed} />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}